(ns  langlab.core.multi-stemmers
  "Module contains stemming algorithms returning multiple results."
  (:require [ clojure.java.io :as io])
  (:import
      [java.lang CharSequence]
      [morfologik.stemming WordData]
      [morfologik.stemming PolishStemmer]
      [org.apache.lucene.util CharsRef ]
      [hunspell_stemmer Dictionary Stemmer]))

(set! *warn-on-reflection* true)

(defn pl-multi-stem-morfologik
  "Returns a seq of stems for `word` generated by Polish Morfologik stemmer."
  [ ^String word ]
  (let [
        stemmer (new PolishStemmer)
        conv-to-string
          (fn [ ^WordData w ]
            (. (. w getStem) toString))
        stems (map
               conv-to-string
               (. stemmer lookup word))
       ]
    stems))

(defn ^:private ^Dictionary read-hunspell-dict
  [aff-fname dic-fname]
  (with-open
      [
         as (io/input-stream aff-fname)
         ds (io/input-stream dic-fname)
      ]
    (Dictionary. as ds)))

(defn ^:private input-stream? [o]
  (instance? java.io.InputStream o))

(defn ^:private conv-to-input-stream [x]
  (if (input-stream? x)
    x
    (io/input-stream x)))

(defn make-multi-stem-hunspell-raw
  "Creates Hunspell stemming function based on dictionaries read from
   `aff-fname-or-stream` `dic-fname-or-stream`. Each parameter can be
   either file name or stream. It returns a stemming function with
   signature String -> String.

   **Note.** Since the hunspell is a dictionary stemmer, the created function
   returns empty collection, if it encounters unknown term. Complementary
   fucntion `make-multi-stem-hunspell` returns the original word in this case."
  [aff-fname-or-stream dic-fname-or-stream]
  (let [
        as (conv-to-input-stream aff-fname-or-stream)
        ds (conv-to-input-stream dic-fname-or-stream)
        d ^Dictionary (Dictionary. as ds)
        ]
    (fn [^String word]
      (let [
            stemmer (Stemmer. d)
            word-array (.toCharArray word)
            stem-list (.uniqueStems stemmer word-array (.length word))
            conv-f
            (fn [ ^CharsRef cf]
              (.toString cf))
            ]
          (map conv-f stem-list)))))

(defn ^:private conv-empty-to-arg [ f ]
  (fn [ word ]
    (let [
          res (f word)
          ]
      (if (empty? res)
        word
        res))))

(defn make-multi-stem-hunspell
  "Creates Hunspell stemming function based on dictionaries stored in
   `aff-fname` and `dic-fname`. Each parameter can be either file name or
   stream. It returns a stemming function with signature String -> String.

  **Note.** Since the hunspell is a dictionary stemmer, the created function
  returns original word, if it encounters unknown term. Complementary function
  `make-multi-stem-hunspell-raw` returns empty collection in this case"

  [aff-fname-or-stream dic-fname-or-stream ]
  (conv-empty-to-arg
    (make-multi-stem-hunspell-raw aff-fname-or-stream dic-fname-or-stream)))

(defn select-longest-word
  "Selects the longest string out of `words`.

   Can be used to select one of the multiple stems and hence convert
   multi-stemmer to stemmer."
  [ words ]
  (if (empty? words)
    nil
    (let [
          len-f
            (fn [ ^String s ]
              (.length s))
          ]
      (apply (partial max-key) len-f words))))

(defn select-shortest-word
  "Selects the shortest string out of `words`.

   Can be used to select one of the multiple stems and hence convert
   multi-stemmer to stemmer."
  [ words ]
  (if (empty? words)
    nil
    (let [
          len-f
          (fn [ ^String s ]
            (.length s))
          ]
      (apply (partial min-key) len-f words))))

(defn merge-multiple-words
  "Sorts `words` and merges them into one string with a separator `sep` in
   between.

   Can be used to merge multiple stems into one word and hence convert
   multi-stemmer to stemmer."
  [words sep]
  (if (empty? words)
    nil
    (->>
      words
      sort
      (interpose sep)
      (apply str))))